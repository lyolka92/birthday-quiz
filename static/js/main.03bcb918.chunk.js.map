{"version":3,"sources":["utils.ts","questions.js","API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","images/alps.jpeg","App.styles.ts","App.tsx","index.tsx"],"names":["shuffleArray","array","sort","Math","random","questions","correct_answer","incorrect_answers","question","fetchQuizQuestions","questionsWithAnswers","map","answers","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","TOTAL_QUESTIONS","length","App","useState","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","a","newQuestions","undefined","event","currentTarget","prev","answerObject","nextQuestionNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03bcb918.chunk.js","sourcesContent":["export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","export const questions = [\n  {\n    correct_answer: \"Helvetica\",\n    incorrect_answers: [\"Farofthland\", \"Switzerlandi\", \"Gerish\"],\n    question: \"Как называют свою страну жители Швейцарии?\",\n  },\n  {\n    correct_answer: \"Альпы\",\n    incorrect_answers: [\"Арсельды\", \"Фьорды\", \"Кувиярза\"],\n    question: \"Как называются знаменитые горы в Швейцарии?\",\n  },\n  {\n    correct_answer: \"Швейцария нигде не состоит\",\n    incorrect_answers: [\"В Евросоюзе\", \"В Евразийском союзе\"],\n    question: \"Где состоит Швейцария?\",\n  },\n  {\n    correct_answer: \"Гранит Джака\",\n    incorrect_answers: [\n      \"Диорит Ахездин\",\n      \"Андезит Олкемесерри\",\n      \"Камен Прекос\",\n    ],\n    question:\n      \"В Швейцарии есть футболист, у которого имя - название камня. Как зовут этого футболиста?\",\n  },\n  {\n    correct_answer: \"Коня\",\n    incorrect_answers: [\"Ножа\", \"Часов\", \"Сыра\"],\n    question: \"Что швейцарского не существует?\",\n  },\n  {\n    correct_answer: \"Белый крест на красном фоне\",\n    incorrect_answers: [\n      \"Красный крест на синем фоне\",\n      \"Шестиконечная чёрная звезда на белом фоне\",\n      \"Герб на фоне красного и желтого цветов\",\n    ],\n    question: \"Что изображено на флаге Швейцарии?\",\n  },\n  {\n    correct_answer: \"Президент\",\n    incorrect_answers: [\"Король\", \"Герцог\", \"Царь\"],\n    question: \"Какая должность правителя в Швейцарии?\",\n  },\n  {\n    correct_answer: \"В Швейцарии нет официальной столицы\",\n    incorrect_answers: [\"Цюрих\", \"Берн\", \"Милан\", \"Люцерн\"],\n    question: \"Столица Швейцарии?\",\n  },\n  {\n    correct_answer: \"Немецкий, французский\",\n    incorrect_answers: [\n      \"Испанский, австрийский\",\n      \"Французский, итальянский\",\n      \"Швейцарский, цюриховский\",\n    ],\n    question: \"На каких языках разговаривают швейцарцы?\",\n  },\n  {\n    correct_answer: \"Суслик\",\n    incorrect_answers: [\"Собака\", \"Корова\", \"Кошка\"],\n    question: \"Какое животное не обитает в Швейцарии?\",\n  },\n  {\n    correct_answer: \"Словакия\",\n    incorrect_answers: [\"Австрия\", \"Франция\", \"Италия\"],\n    question: \"С какой из этих стран Швейцария не имеет границы?\",\n  },\n  {\n    correct_answer: \"Ги Пармелен\",\n    incorrect_answers: [\n      \"Андрес Ноштерден\",\n      \"Карин Келлер-Зуттер\",\n      \"Виола Амерд\",\n    ],\n    question: \"Кто правит Швейцарией?\",\n  },\n];\n","import { shuffleArray } from \"./utils\";\nimport { questions } from \"./questions\";\n\nexport type Question = {\n  correct_answer: string;\n  incorrect_answers: string[];\n  question: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = () => {\n  const questionsWithAnswers = questions.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n\n  return shuffleArray(questionsWithAnswers);\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #fff;\n  border-radius: 10px;\n  border: 1px solid #ccc;\n  padding: 20px;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  margin: 20px 10px;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    color: white;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? \"linear-gradient(90deg, rgb(81, 101, 46), rgb(133, 143, 84))\"\n        : !correct && userClicked\n        ? \"linear-gradient(90deg, #c16899, #ff5656)\"\n        : \"linear-gradient(90deg, rgb(88, 122, 162), rgb(167, 204, 240))\"};\n    border: 1px solid white;\n    box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\nimport { AnswerObject } from \"../App\";\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nexport const QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Вопрос {questionNumber} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n","export default __webpack_public_path__ + \"static/media/alps.9fc50d9f.jpeg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/alps.jpeg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n    \n    body {\n        background-image: linear-gradient(rgba(255, 255, 255, 0.2), rgba(0, 0, 0, 0.3)), url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0;\n        display: flex;\n        justify-content: center;\n      height: 100vh;\n    }\n    \n    * {\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 500;\n    font-size: 14px;\n    }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: black;\n  }\n\n  .score {\n    color: black;\n    font-size: 2rem;\n    font-weight: 700;\n    margin: 0;\n  }\n\n  .final_score {\n    color: black;\n    filter: drop-shadow(5px 5px rgb(255, 255, 255));\n    font-family: \"GUERRILLA\", \"Comic Sans MS\", sans-serif;\n    font-size: 350px;\n    font-weight: 700;\n    text-align: center;\n    margin: 0;\n  }\n\n  h1 {\n    color: black;\n    filter: drop-shadow(2px 2px rgb(255, 255, 255));\n    font-family: \"GUERRILLA\", \"Comic Sans MS\", sans-serif;\n    font-size: 80px;\n    font-weight: 700;\n    text-align: center;\n    margin: 20px 0;\n  }\n\n  @media screen and (max-width: 450px) {\n    h1 {\n      font-size: 60px;\n    }\n  }\n\n  @media screen and (max-width: 350px) {\n    h1 {\n      font-size: 50px;\n    }\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, white, #ddd);\n    border: 1px solid #ccc;\n    border-radius: 10px;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions, QuestionState } from \"./API\";\nimport { QuestionCard } from \"./components/QuestionCard\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\nimport { questions } from \"./questions\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = questions.length;\n\nexport const App = () => {\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startQuiz = async () => {\n    setGameOver(false);\n\n    const newQuestions = fetchQuizQuestions();\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n  };\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = event.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) {\n        setScore((prev) => prev + 1);\n      }\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestionNumber = number + 1;\n    if (nextQuestionNumber === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestionNumber);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>ВИКТОРИНА</h1>\n        {gameOver && userAnswers.length !== TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startQuiz}>\n            Старт\n          </button>\n        ) : null}\n        {!gameOver && userAnswers.length !== TOTAL_QUESTIONS ? (\n          <>\n            <p className=\"score\">Счёт: {score}</p>\n            <QuestionCard\n              questionNumber={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />{\" \"}\n          </>\n        ) : null}\n        {!gameOver &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Следующий вопрос\n          </button>\n        ) : null}\n        {userAnswers.length === TOTAL_QUESTIONS ? (\n          <>\n            <p>Игра окончена! Покажите результат ведущему.</p>\n            <p className=\"final_score\">{score}</p>\n          </>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}