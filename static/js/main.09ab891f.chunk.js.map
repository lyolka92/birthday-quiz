{"version":3,"sources":["images/quiz_BG.001.jpeg","utils.ts","questions.js","API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","shuffleArray","array","sort","Math","random","questions","correct_answer","incorrect_answers","question","fetchQuizQuestions","questionsWithAnswers","map","answers","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","a","newQuestions","length","undefined","event","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestionNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09ab891f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quiz_BG.001.969d80e7.jpeg\";","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","export const questions = [\n  {\n    correct_answer: \"Новоторы\",\n    incorrect_answers: [\"Торжковцы\", \"Торжи\", \"Торжокяне\"],\n    question: \"Как называются жители города Торжок?\",\n  },\n  {\n    correct_answer: \"Тверяки\",\n    incorrect_answers: [\"Тверцы\", \"Тверские\", \"Тверяне\"],\n    question: \"Как называются жители города Тверь?\",\n  },\n  {\n    correct_answer: \"Архангелогородцы\",\n    incorrect_answers: [\"Архангелы\", \"Архангельцы\", \"Архангеляне\"],\n    question: \"Как называются жители города Архангельск?\",\n  },\n  {\n    correct_answer: \"Гусевчане\",\n    incorrect_answers: [\"Гусьхрустальцы\", \"Гуси\", \"Хрусталяне\"],\n    question: \"Как называются жители города Гусь-Хрустальный?\",\n  },\n  {\n    correct_answer: \"Махачкалинцы\",\n    incorrect_answers: [\"Махачкалы\", \"Махачаляне\", \"Махачи\"],\n    question: \"Как называются жители города Махачкала?\",\n  },\n  {\n    correct_answer: \"Псковитяне\",\n    incorrect_answers: [\"Псковцы\", \"Псковельцы\", \"Псковичи\"],\n    question: \"Как называются жители города Псков?\",\n  },\n  {\n    correct_answer: \"Устюжане\",\n    incorrect_answers: [\"Великоустюгичи\", \"Устяжи\", \"Устюганцы\"],\n    question: \"Как называются жители города Великий Устюг?\",\n  },\n  {\n    correct_answer: \"Тагильчане\",\n    incorrect_answers: [\"Тагильцы\", \"Тагиловичи\", \"Тагиловцы\"],\n    question: \"Как называются жители города Нижний Тагил?\",\n  },\n  {\n    correct_answer: \"Биробиджанцы\",\n    incorrect_answers: [\"Биробиджане\", \"Биробиджики\", \"Биробиджаничи\"],\n    question: \"Как называются жители города Биробиджан?\",\n  },\n  {\n    correct_answer: \"Черкесцы\",\n    incorrect_answers: [\"Черкессяне\", \"Черкессовцы\", \"Черкесы\"],\n    question: \"Как называются жители города Черкесск?\",\n  },\n  {\n    correct_answer: \"Куряне\",\n    incorrect_answers: [\"Курсовцы\", \"Курские\", \"Курсичи\"],\n    question: \"Как называются жители города Курск?\",\n  },\n  {\n    correct_answer: \"Пермяки\",\n    incorrect_answers: [\"Пермцы\", \"Пермяне\", \"Пермские\"],\n    question: \"Как называются жители города Пермь?\",\n  },\n];\n","import { shuffleArray } from \"./utils\";\nimport { questions } from \"./questions\";\n\nexport type Question = {\n  correct_answer: string;\n  incorrect_answers: string[];\n  question: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = () => {\n  const questionsWithAnswers = questions.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n\n  return shuffleArray(questionsWithAnswers);\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #fff;\n  border-radius: 10px;\n  border: 1px solid #ccc;\n  padding: 20px;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  margin: 20px 10px;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    color: white;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? \"linear-gradient(90deg, #2c9299, #62cb4a)\"\n        : !correct && userClicked\n        ? \"linear-gradient(90deg, #c16899, #ff5656)\"\n        : \"linear-gradient(90deg, rgb(0, 141, 192), rgb(89, 253, 224))\"};\n    border: 1px solid white;\n    box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\nimport { AnswerObject } from \"../App\";\nimport { ButtonWrapper, Wrapper } from \"./QuestionCard.styles\";\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNumber: number;\n  totalQuestions: number;\n};\n\nexport const QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNumber,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Вопрос {questionNumber} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/quiz_BG.001.jpeg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n    \n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0;\n        display: flex;\n        justify-content: center;\n    }\n    \n    * {\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif;\n    font-weight: 500;\n    font-size: 14px;\n    }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: black;\n  }\n\n  .score {\n    color: black;\n    font-size: 2rem;\n    font-weight: 700;\n    margin: 0;\n  }\n\n  @font-face {\n    font-family: \"GUERRILLA-Normal\";\n    src: url(\"../public/fonts/guerrilla-normal.eot\");\n    src: local(\"GUERRILLA Normal\"), local(\"GUERRILLA\"),\n      url(\"../public/fonts/guerrilla-normal.woff\") format(\"woff\"),\n      url(\"../public/fonts/guerrilla-normal.ttf\") format(\"truetype\"),\n      url(\"../public/fonts/guerrilla-normal.svg#GUERRILLA-Normal\") format(\"svg\");\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  h1 {\n    color: black;\n    filter: drop-shadow(2px 2px rgb(255, 255, 255));\n    font-family: \"GUERRILLA-Normal\", \"Comic Sans MS\", sans-serif;\n    font-size: 80px;\n    font-weight: 700;\n    text-align: center;\n    margin: 20px 0;\n  }\n\n  @media screen and (max-width: 450px) {\n    h1 {\n      font-size: 60px;\n    }\n  }\n\n  @media screen and (max-width: 350px) {\n    h1 {\n      font-size: 50px;\n    }\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, white, #ddd);\n    border: 1px solid #ccc;\n    border-radius: 10px;\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions, QuestionState } from \"./API\";\nimport { QuestionCard } from \"./components/QuestionCard\";\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 12;\n\nexport const App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = fetchQuizQuestions();\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = event.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore((prev) => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    const nextQuestionNumber = number + 1;\n    if (nextQuestionNumber === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestionNumber);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>ВИКТОРИНА</h1>\n        {gameOver && userAnswers.length !== TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Старт\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Счёт: {score}</p> : null}\n        {loading && <p>Загрузка вопросов...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!loading &&\n        !gameOver &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Следующий вопрос\n          </button>\n        ) : null}\n        {userAnswers.length === TOTAL_QUESTIONS ? <p>Игра окончена!</p> : null}\n      </Wrapper>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}